* 2.5 행렬분해(Matrix Factorizations)
행렬곱은 데이터 합성에 행렬분해는 데이터 해석에 관계된다.

** LU분해(LU Factorizations)
같은 계수행렬을 가지는 행렬방정식 수열을 빨리 풀기 위한 방법으로 고안되었다. 
수열 중 첫번째 방정식을 행축약으로 풀면서 계수행렬의 LU분해를 얻어낼 수 있다.  
L은 단위하삼각행렬 unit Lower triangular matrix이고
U는 평행사변형 행렬이다.
L은 별도의 추가 연산 없이 행축약 연산 과정만으로도 구해진다.

** LU분해 알고리즘(An LU Factorization algorithm)
행축약을 *행교체* 연산만으로 수행할 때 그 행연산들은 단위하삼각 기본행렬(unit Lower triangular elementary matrix)들의 곱으로 표현될 수 있다. 이 단위하삼각 기본행렬들의 곱의 역행렬을 구하면 단위하삼각행렬을 구할 수 있다.
Ep...E1A = U
A = (Ep...E1)^-1U
L = (Ep...E1)^-1
(Ep...E1)L = (Ep...E1)(Ep...E1)^-1 = I  따라서 L은 가역적이다.
L^-1 = (Ep...E1)
L^-1A = U
A = LU

#+BEGIN_QUOTE
LU분해를 위한 알고리즘.
1. 가능하면 *행교체* 연산들의 수열로 A를 U로 축약해라.
2. 같은 행연산들의 수열이 L을 I로 축약하게 L의 요소들을 배치해라.
#+END_QUOTE

1단계가 된다면 LU분해가 된다는 것이다. 
2단계는 주대각선 아래 영역을 비워둔 단위하삼각행렬을 두고 A의 대응되는 열에서 추축위치 이하의 요소를 옮겨 적는다.
그리고 추축위치를 모두 1로 만들기 위하여 해당 열을 각 추축위치 값으로 모두 나누면 단위하삼각행렬이 완성된다.

실무에서는 *행교환* 이 대부분 필요하다. 
행보다 열이 더 큰 행렬의 경우 행교환 연산 없이 행교체 연산만 수행하면 필연적으로 추축위치가 없는 열이 나온다. 반대로 행이 더 큰 행렬은 추축위치가 없는 행이 나온다. (추축위치 선정은 그 열에서 절대값으로 가장 큰 수를 택한다.) 여기서 행교환 연산 전에 추축열에서 추축위치 이하의 값들을 행렬L로 옮기고 추축위치의 값들로 각 열을 모두 나눈다. 그리고 나서 L에 행교환 연산을 수행하면 단위하삼각행렬이 만들어 진다. 

#+BEGIN_QUOTE
수치적 유의사항: 행 크기가 30이상이고 성분에 0이 적은 정방행렬의 연산횟수.
1. LU분해는 2n^3/3 flops, A^-1찾기는 2n^3 flops 소요된다.
2. Ly=b와 Ux=y는 2n^2 flops 소요된다. 삼각계 푸는데 n^2 flops가 소요되기 때문이다.
3. A^-1곱도 2n^2 flops가 소요된다. 하지만 계산결과가 LU분해만큼 정확하지는 않다.
4. 행렬자체가 0이 많으면, L과 U 행렬도 0이 많을 수 있다. 반면 A^-1는 0이 적을 가능성이 높다. 이런 때는 Ax=b 해를 구하는 것은 LU분해가 훨씬 더 빠르다. 
#+END_QUOTE

** 전기공학에서 나오는 행렬분해
전기회로와 행렬분해는 긴밀한 관계이다. 회로의 입출력을 전압 전류를 요소로 하는 벡터로 나타내보면 입력을 출력으로 변환하는 것은 대체로 선형이다. 이 변환에 있는 표준행렬을 전송행렬(transfer matrix)이라고 한다. 
전기회로를 설계하고 옴의 법칙과 키르히호프법칙을 이용해서 내부 회로의 개별 전송행렬을 구할 수 있다. 이것을 선형변환결합으로 하나의 행렬로 융합하면 해당 회로망의 전송행렬이 된다. 전송행렬은 전체 회로망의 출입을 개괄한다.

공학자가 착상한 회로를 만들기 전에 그것이 구현 가능한지를 판별해야 한다. 전송행렬을 확정한 뒤에 이것을 행렬분해하는데 최대한 기성회로부품들의 조합으로 구현 가능한지 판단하기 위해 기성회로들의 스펙에 맞춰 행렬분해를 시도한다. 


* 2.6 레온티프 입출력 모델
국가 총생산 = 중간수요(intermediate demand) +  최종수요(final demand)
중간수요는 각 영역에서 생산자 자신들이 소비하는 것
최종수요는 다른 영역의 소비자들이 소비하는 것
레온티프 입출력 모델은 n개의 생산영역이 있을 때 특정 영역의 단위 생산에 필요한 전체 영역의 단위 수요를 모은 단위소비벡터를 제시한다. 생산에 필요한 개별 영역의 수요는 생산과 개별 영역의 단위소비벡터의 곱이 된다. 개별 영역의 단위소비벡터를 모아서 전체 영역의 소비행렬을 만들 수 있다. x를 총생산, C를 소비행렬, d를 최종수요라고 할 때 x = Cx + d 관계가 성립한다. 전체 영역의 최종수요를 알고 싶다면 Ix - Cx = d 를 (I - C)x = d 로 변환하여 구할 수 있다. I - C를 구해서 d와의 첨가행렬로 만들어 기약 사다리꼴을 구하면 x가 나올 것이다. 
#+BEGIN_QUOTE
정리11 
전제: C는 소비행렬, d는 최종수요, C,d는 음수가 아니고 C의 각 컬럼별 합계는 1이 안되고 (I - C)의 역이 존재한다.
x = (I - C)-1d
x = Cx + d
#+END_QUOTE

** (I - C)-1에 대한 공식
한 국가 총생산과 수요를 맞추기 위하여 x=d로 설정하게 되면 중간수요(자체수요)는 Cd가 된다. 문제는 이 Cd를 구하려고 들면 수학적으로 재귀적인 관계가 발생된다. 즉 Cd 생산을 위한 자체수요 역시 고려해야 하는데 이것은 CCd가 되고 이에 대한 자체수요를 또 고려하면 CCCd가 된다. 이런 관계를 투입x에 대한 식으로 정리하면
x = d + Cd + CCd + CCCd ... 
x = (I + C + CC + CCC ...)d
정리11에서 x = (I - C)-1d를 적용하면
(I-C)-1 = I + C + CC + CCC ... 가 될 것 같지만 이렇게 단정할 수는 없다. 이것은 같은 것이 아니고 근사값이 되는 것이며 그것도 C의 각 열이 엄격하게 그 내부합이 모두 1 미만인 경우에만 근사값이 된다.
실제 현실세계에서 C의 제곱들은 이론보다 훨씬 빨리 0에 가까워진다. 따라서 이 근사값 공식은 계산에 매우 유용하다.


** (I - C)-1의 요소들의 경제학적 중요성
최종수요가 변동될 때 생산량을 어떻게 변경해야 하는지 예측하는데 (I - C)-1가 중요하다. 이것의 j번째열은 최종수요의 j번째 열의 1단위 증가를 만족시키기 위하여 각 영역이 생산해야 하는 증가된 양들이다.
#+BEGIN_QUOTE
경제영역 이외의 모든 응용문제에도 Ax=b는 C = (I - A)가 있을 때 (I - C)x = b로 쓰여질 수 있다. 
만약 선형계가 아주 크고 성분에 0이 많으면 C의 계속된 제곱은 0과 가까워지는데, 그 정도가 충분히 빠르면 Ax=b의 해를 구하고 A의 역행렬을 구하는데 아주 유용하다.
#+END_QUOTE  

