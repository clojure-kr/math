* 2.5 행렬분해(Matrix Factorizations)
행렬곱은 데이터 합성에 행렬분해는 데이터 해석에 관계된다.

** LU분해(LU Factorizations)
같은 계수행렬을 가지는 행렬방정식 수열을 빨리 풀기 위한 방법으로 고안되었다. 
수열 중 첫번째 방정식을 행축약으로 풀면서 계수행렬의 LU분해를 얻어낼 수 있다.  
L은 단위하삼각행렬 unit Lower triangular matrix이고
U는 평행사변형 행렬이다.
L은 별도의 추가 연산 없이 행축약 연산 과정만으로도 구해진다.

** LU분해 알고리즘(An LU Factorization algorithm)
행축약을 *행교체* 연산만으로 수행할 때 그 행연산들은 단위하삼각 기본행렬(unit Lower triangular elementary matrix)들의 곱으로 표현될 수 있다. 이 단위하삼각 기본행렬들의 곱의 역행렬을 구하면 단위하삼각행렬을 구할 수 있다.
Ep...E1A = U
A = (Ep...E1)^-1U
L = (Ep...E1)^-1
(Ep...E1)L = (Ep...E1)(Ep...E1)^-1 = I  따라서 L은 가역적이다.
L^-1 = (Ep...E1)
L^-1A = U
A = LU

#+BEGIN_QUOTE
LU분해를 위한 알고리즘.
1. 가능하면 *행교체* 연산들의 수열로 A를 U로 축약해라.
2. 같은 행연산들의 수열이 L을 I로 축약하게 L의 요소들을 배치해라.
#+END_QUOTE

1단계가 된다면 LU분해가 된다는 것이다. 
2단계는 주대각선 아래 영역을 비워둔 단위하삼각행렬을 두고 A의 대응되는 열에서 추축위치 이하의 요소를 옮겨 적는다.
그리고 추축위치를 모두 1로 만들기 위하여 해당 열을 각 추축위치 값으로 모두 나누면 단위하삼각행렬이 완성된다.

실무에서는 *행교환* 이 대부분 필요하다. 
행보다 열이 더 큰 행렬의 경우 행교환 연산 없이 행교체 연산만 수행하면 필연적으로 추축위치가 없는 열이 나온다. 반대로 행이 더 큰 행렬은 추축위치가 없는 행이 나온다. (추축위치 선정은 그 열에서 절대값으로 가장 큰 수를 택한다.) 여기서 행교환 연산 전에 추축열에서 추축위치 이하의 값들을 행렬L로 옮기고 추축위치의 값들로 각 열을 모두 나눈다. 그리고 나서 L에 행교환 연산을 수행하면 단위하삼각행렬이 만들어 진다. 

#+BEGIN_QUOTE
수치적 유의사항: 행 크기가 30이상이고 성분에 0이 적은 정방행렬의 연산횟수.
1. LU분해는 2n^3/3 flops, A^-1찾기는 2n^3 flops 소요된다.
2. Ly=b와 Ux=y는 2n^2 flops 소요된다. 삼각계 푸는데 n^2 flops가 소요되기 때문이다.
3. A^-1곱도 2n^2 flops가 소요된다. 하지만 계산결과가 LU분해만큼 정확하지는 않다.
4. 행렬자체가 0이 많으면, L과 U 행렬도 0이 많을 수 있다. 반면 A^-1는 0이 적을 가능성이 높다. 이런 때는 Ax=b 해를 구하는 것은 LU분해가 훨씬 더 빠르다. 
#+END_QUOTE

** 전기공학에서 나오는 행렬분해
전기회로와 행렬분해는 긴밀한 관계이다. 회로의 입출력을 전압 전류를 요소로 하는 벡터로 나타내보면 입력을 출력으로 변환하는 것은 대체로 선형이다. 이 변환에 있는 표준행렬을 전송행렬(transfer matrix)이라고 한다. 
전기회로를 설계하고 옴의 법칙과 키르히호프법칙을 이용해서 내부 회로의 개별 전송행렬을 구할 수 있다. 이것을 선형변환결합으로 하나의 행렬로 융합하면 해당 회로망의 전송행렬이 된다. 전송행렬은 전체 회로망의 출입을 개괄한다.

공학자가 착상한 회로를 만들기 전에 그것이 구현 가능한지를 판별해야 한다. 전송행렬을 확정한 뒤에 이것을 행렬분해하는데 최대한 기성회로부품들의 조합으로 구현 가능한지 판단하기 위해 기성회로들의 스펙에 맞춰 행렬분해를 시도한다. 


* 2.6 레온티프 입출력 모델
국가 총생산 = 중간수요(intermediate demand) +  최종수요(final demand)
중간수요는 각 영역에서 생산자 자신들이 소비하는 것
최종수요는 다른 영역의 소비자들이 소비하는 것
레온티프 입출력 모델은 n개의 생산영역이 있을 때 특정 영역의 단위 생산에 필요한 전체 영역의 단위 수요를 모은 단위소비벡터를 제시한다. 생산에 필요한 개별 영역의 수요는 생산과 개별 영역의 단위소비벡터의 곱이 된다. 개별 영역의 단위소비벡터를 모아서 전체 영역의 소비행렬을 만들 수 있다. x를 총생산, C를 소비행렬, d를 최종수요라고 할 때 x = Cx + d 관계가 성립한다. 전체 영역의 최종수요를 알고 싶다면 Ix - Cx = d 를 (I - C)x = d 로 변환하여 구할 수 있다. I - C를 구해서 d와의 첨가행렬로 만들어 기약 사다리꼴을 구하면 x가 나올 것이다. 
#+BEGIN_QUOTE
정리11 
전제: C는 소비행렬, d는 최종수요, C,d는 음수가 아니고 C의 각 컬럼별 합계는 1이 안되고 (I - C)의 역이 존재한다.
x = (I - C)-1d
x = Cx + d
#+END_QUOTE

** (I - C)-1에 대한 공식
한 국가 총생산과 수요를 맞추기 위하여 x=d로 설정하게 되면 중간수요(자체수요)는 Cd가 된다. 문제는 이 Cd를 구하려고 들면 수학적으로 재귀적인 관계가 발생된다. 즉 Cd 생산을 위한 자체수요 역시 고려해야 하는데 이것은 CCd가 되고 이에 대한 자체수요를 또 고려하면 CCCd가 된다. 이런 관계를 투입x에 대한 식으로 정리하면
x = d + Cd + CCd + CCCd ... 
x = (I + C + CC + CCC ...)d
정리11에서 x = (I - C)-1d를 적용하면
(I-C)-1 = I + C + CC + CCC ... 가 될 것 같지만 이렇게 단정할 수는 없다. 이것은 같은 것이 아니고 근사값이 되는 것이며 그것도 C의 각 열이 엄격하게 그 내부합이 모두 1 미만인 경우에만 근사값이 된다.
실제 현실세계에서 C의 제곱들은 이론보다 훨씬 빨리 0에 가까워진다. 따라서 이 근사값 공식은 계산에 매우 유용하다.


** (I - C)-1의 요소들의 경제학적 중요성
최종수요가 변동될 때 생산량을 어떻게 변경해야 하는지 예측하는데 (I - C)-1가 중요하다. 이것의 j번째열은 최종수요의 j번째 열의 1단위 증가를 만족시키기 위하여 각 영역이 생산해야 하는 증가된 양들이다.
#+BEGIN_QUOTE
경제영역 이외의 모든 응용문제에도 Ax=b는 C = (I - A)가 있을 때 (I - C)x = b로 쓰여질 수 있다. 
만약 선형계가 아주 크고 성분에 0이 많으면 C의 계속된 제곱은 0과 가까워지는데, 그 정도가 충분히 빠르면 Ax=b의 해를 구하고 A의 역행렬을 구하는데 아주 유용하다.
#+END_QUOTE  

* 2.7 컴퓨터 그래픽에 응용
이미지는 선 내지 곡선들을 연결하는 수 많은 점들과, 경계지어진 폐쇄 영역을 어떻게 채울지에 대한 정보들로 구성된다. 곡선들은 짧은 선분들에 의하여 근사되고 도형은 수학적으로 점들(꼭지점)의 목록으로 정의된다.
컴퓨터 그래픽 객체들이 직선분들의 집합으로 기술되는 주된 이유는 그 표준변환이 선분들을 다른 선분들로 전사하기 때문이다. 
컴퓨터 그래픽의 수학은 행렬곱과 긴밀하게 연결되어 있지만 화면에서 객체를 평행이동시키는 것은 선형이 아니어서 행렬곱과 직접 연결되지 않는다. 이것의 해결방법이 동차좌표다.
(생각들: 앞서 본 반사,층밀림,팽창,수축,회전,사영 등의 변환은 선형이다. 그러나 (평행)이동은 선형변환이 아니다.
위 선형변환들의 공통적 특징은 모두 항등행렬의 행연산으로 표기가 가능했다는 점이다. 이동은 그것이 안되는 모양이다.
선형변환은 기본적으로 표준행렬의 곱이다. 따라서 하나의 표준행렬이나 행렬들의 곱이어야 한다. 하지만 평행이동은 가장 쉽게 생각하면 행렬합이다. 행렬합을 행렬곱으로 나타낼 수 없다면 선형변환이 안된다. 결국 행렬합을 행렬곱에 집어넣기 위한 방법이 동차좌표가 된다.) 

** 동차좌표(Homogeneous Coordinates)
2차원 평면 좌표 (x,y)에는 3차원 공간의 2차원 평면위 좌표 (x,y,1)가 동차좌표다. 
점들에 대한 동차좌표들에 행렬합이나 상수배를 해서 변환시키지 않는다. 하지만 동일차원의 행렬곱으로 변환가능하다.
좌표의 변환은 동차좌표의 변환으로 쓰여질 수 있다. 동차좌표변환으로도 회전, 반사, 팽창수축등 선형변환이 정상적으로 이루어진다. 2x2 A블록을 가지는 [[A 0] [0 1]] 분할행렬을 이용하면 동차좌표들로 2차원위의 선형변환을 표현할 수 있다. 

** 합성변환(Composite Transformations)
컴퓨터 화면의 도형을 움직이는 것은 종종 두 가지 이상의 변환이 필요하다. 변환의 합성이 선형이 안될 때(평행이동이 끼어 있으면 선형이 안된다.) 동차좌표를 사용하면 행렬곱에 대응하게 된다.

** 3차원 컴퓨터 그래픽
분자모델링

** 동차 3차원 좌표
2차원을 유추해서 3차원 (x,y,z)에 대한 동차좌표 (x,y,z,1)을 생각해볼 수 있다. 
이를 일반화하면 (X,Y,Z,H)가 (x,y,z)의 동차3차원좌표인데 H!=0이 아니면 X,Y,Z를 H로 나눈 것이 x,y,z가 된다.
다르게 보면 (x,y,z,1)에 상수배를 한 것도 (x,y,z)의 동차좌표다.(여기서 상수배는 변환을 위한 것이 아니므로 위의 서술과 모순되지 않는다.) 
3차원 회전변환을 예로들면 y축을 기준으로 30도 회전한다고 해보자. 양각 회전은 반시계반향회전이다. 3차원 항등행렬을 쉽게 예로들면 e1, e2, e3의 3개 벡터가 존재하고 이것들이 회전한다고 생각할 수 있다.
각각 (1,0,0), (0,1,0), (0,0,1)인데 이 벡터들을 30도 회전한다고 하면 변환의 표준행렬을 구할 수 있다. 
(1,0,0)은 x축 위의 점으로 (cos30˚,0,-sin30˚) (z축이 음양을 구분하는 절반의 영역을 가로질러 위치 변경되므로 -를 붙임) 
(0,1,0)은 y축 위에 붙어 있는 점으로 변환이 안된다. 
(0,0,1)은 z축 위의 점으로 (sin30˚,0,cos30˚) (축이 절반을 가로지르지 않으므로 음양변경 없음)
이것의 4차원 동차좌표는 [[cos30˚ 0 -sin30˚ 0] [0 1 0 0] [(sin30˚ 0 cos30˚ 1]]이 된다.

만약 특정벡터만큼 이동하는 것이면 3차원 항등행렬의 4차원 동차좌표의 추가된 마지막 열에 이동될 x,y,z값이 차례로 기재되면 된다.

** 투시사영(Perspective Projections)
3차원 물체를 보이는 평면에 전사 사영함으로써 3차원 물체를 컴퓨터 화면에 나타낸다. 
컴퓨터 스크린을 xy평면이라고 하고 투시장치의 눈이 z축의 (0,0,d)에 있다고 가정하면 투시사영은 물체의 점 (x,y,z)를 화면 (x*,y*,0)에 전사해서 두 점(물체의 점과 화면의 점)과 사영의 중심인 눈의 점을 하나의 선 위에 두는 것이다. 이것이 xz평면에 남기는 삼각형을 관찰하면 사영중심에서 물체까지의 삼각형과 사영중심에서 화면까지의 삼각형이 있다. 이들은 같은 모양으로 비례관계에 있으니 식으로 정리하면 x*/d = x/(d-z) 가 되고 x* = 1/(1-z/d) 가 된다. 마찬가지로 y*에 대하여 정리하게 되면 y* = 1/(1-z/d)이다. 그러면 동차좌표 (x,y,z,1) |-> (1/(1-z/d),(1/(1-z/d),0,1) 가 되는데 동차좌표의 각 요소에 상수배를 한 것도 여전히 동차좌표다. (1-z/d) 상수배하면 (x,y,0,1-z/d)가 된다. 
(생각:3차원에서 2차원으로 사영변환은 선형변환이지 않나? 선형변환에 왜 4차원 동차좌표까지 사용해야 하는가? 3차원의 고정된 화면이 사영변환되면 선형변환일 것 같다. 하지만 평행이동궤적들이 2차원으로 사영변환된다고 생각하면 비선형변환이 끼게 된다.)
투시사영변환의 표준행렬은 어떻게 구하나? 입력이 (x,y,z,1)이 되고 출력이 (x,y,0,1-z/d)가 되는 행렬을 구한다.
[[1 0 0 0] [0 1 0 0] [0 0 0 0] [0 0 0 1-z/d]]가 된다.
3차원 좌표점들을 열로 하는 행렬을 넣으면 변환된 4차원 행렬이 도출된다. 여기서 각 열의 4번째 요소의 값(1-z/d)들로 열의 다른 요소들을 나누어 주어야 사영되는 점(x*,y*,0)이 나오게 된다.
