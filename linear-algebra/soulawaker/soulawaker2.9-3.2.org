* 2.9 차원과 계수(Dimension and Rank)
  차원은 공간에 대한 개념이고, 계수는 행렬에 대한 개념이다.

** 좌표계(Coordinate Systems)
부분공간을 구성하는 모든 벡터들은 오로지 그 부분공간의 기저벡터들의 선형결합으로만 나타낼 수 있다.

#+BEGIN_QUOTE
정의: 기저B에 대한 x의 좌표. (기저B에 대한) x의 좌표벡터. x의 B좌표벡터.

B={b1,b2,...,bp}가 부분공간H의 기저라고 가정한다.
H 내부의 각 x에 대하여, *기저B에 대한 x의 좌표* 는 x=c1b1 + ... + cpbp에서 가중치 c1,...,cp이고,
Rp의 벡터 [x]B = [c1 ... cp]는 *(B에 대한) x의 좌표벡터* 또는 *x의 B좌표벡터* 라고 불린다. 
#+END_QUOTE

x의 B좌표벡터 구하는 방법은 기저벡터들과 x의 첨가행렬을 만들어서 행축약을 하면 된다.
기저가 부분공간의 좌표계를 결정짓게 된다. 기하학적으로 보면 각 기저벡터는 0과 해당 벡터좌표를 지나는 부분공간의 축이 되고 축 내부 간격의 기본 단위가 된다고도 볼 수 있다.

부분공간의 점들은 원본공간의 점들이기도 하지만 부분공간이 속하는 차원의 좌표벡터에 의해서 완전히 결정된다. 부분공간의 x가 Rp의 [x]B로 대응되는 것은 일대일 대응이며 대응 전에 존재하던 벡터간의 선형결합은 보존된다. 이것이 *동형사상(Isomorphism)* 이다. 부분공간H는 Rp에 동형이다. H 내부의 벡터들이 p개 보다 많은 요소를 가지더라고 동형사상은 부분공간을 Rp차원처럼 보이게 하고 Rp차원처럼 작동하게 한다.

** 부분공간의 차원(The Dimension of a Subspace)
부분공간의 기저들은 여러개 존재할 수 있지만 그 벡터들의 개수만큼은 동일하다.
#+BEGIN_QUOTE
정의: 부분공간의 차원 dim H의 정의.

dim H로 표기되는 0이 아닌 부분공간H의 차원은 H에 대한 임의의 기저의 벡터 개수이다. 
0인 부분공간 {0}의 차원은 0으로 정의된다.
#+END_QUOTE

#+BEGIN_QUOTE
정의: 행렬A의 계수 Rank A 정의.

행렬A의 계수는 A의 열공간의 차원이다.
#+END_QUOTE

A의 추축열이 A의 열공간을 형성하기 때문에 A의 계수는 추축열의 개수이다.

#+BEGIN_QUOTE
정리 14. 계수이론.

행렬A가 n개의 열을 가지면 rank A + dim Nul A = n이 성립한다.
#+END_QUOTE

#+BEGIN_QUOTE
정리 15. 기저이론.

H가 Rn에 속하는 p차원의 부분공간이라고 하자.
H에 속한 p개의 요소들의 선형독립인 집합은 자동적으로 H의 기저가 된다.
H를 생성하는 H에 속한 p개의 요소들은 자동적으로 H의 기저가 된다.
#+END_QUOTE

** 계수와 가역행렬정리(Rank and Invertible Matrix Theorem)
#+BEGIN_QUOTE
정리: 가역행렬정리.

a. A는 가역행렬이다. -> j. CA=I 만족하는 n x n 행렬C 존재한다. -> d. Ax=0은 자명한 해만 갖는다. -> c. A는 모든 열에 추축위치를 갖는다. -> b. A는 I와 행동치다. -> a

k. AD=I 만족하는 n x n 행렬D 존재한다. -> g. Rn의 각 b에 대하여 방정식 Ax=b는 적어도 하나의 해를 갖는다. (정리5는 유일한 해) -> a

g. Rn의 각 b에 대하여 방정식 Ax=b는 적어도 하나의 해를 갖는다. (정리5는 유일한 해) <--> h. A의 열들이 Rn을 생성한다. <--> i. x|->Ax는 Rn을 Rn위로 사상한다.(전사변환)

d. Ax=0은 자명한 해만 갖는다. <--> e. A의 열들은 일차독립인 집합을 이룬다. <--> f. x|->Ax는 일대일이다.

a <--> l. AT는 가역행렬이다

m. A의 열들이 Rn의 기저를 형성한다. <--> h. A의 열들이 Rn을 생성한다.
m <--> e. A의 열들은 일차독립인 집합을 이룬다.

g --> n. Col A = Rn --> o. dim Col A = n --> p. rank A = n --> r. dim Nul A = 0 --> q. Nul A = {0} --> d. Ax=0은 자명한 해만 갖는다. 

#+END_QUOTE

#+BEGIN_QUOTE
수치적 유의사항.

책의 알고리즘들은 개념이해용으로는 좋지만 실생활의 문제를 푸는데는 대부분 적합하지 않다.
계수 결정 문제만 보아도 보기에는 쉽지만 컴퓨터 연산이 정확하지 않으면 잘못된 결과를 낸다.
실제 응용에서는 7.4에서 다루는 특이값 분해를 사용하여 효율적으로 결정한다.
#+END_QUOTE

스터디 가이드에 의한 가역행렬 보충 정리

| m x n 행렬A와 동치인 구문들                  | n x n 행렬A와 동치인 구문들              | n x p 행렬A와 동치인 구문들     |
|-----------------------------------------+-------------------------------------+------------------------------|
| k. AD=I 만족 행렬D 존재한다.                | a. A는 가역행렬이다.                   | CA=I 만족 행렬C 존재한다.        |
| *. A는 모든 행에서 추축위치 갖는다.           | c. A는 n개 추축위치 갖는다.              | *. A는 모든 열에서 추축위치 갖는다. |
| h. A의 열들이 Rm을 생성한다.                | m. A의 열들이 Rn에 대한 기저를 형성한다.   | e. A의 열들은 선형 독립이다.       |
| g. Ax=0은 Rm의 각b에 적어도 하나의 해를 가진다. | *. Ax=0은 Rn의 각b에 유일한 해를 가진다. | d. Ax=0은 자명한 해만 가진다.      |
| i. A->Ax 변환은 Rn에서 Rm으로 전사변환이다.    | *. A->Ax 변환은 가역적이다.            | f. A->Ax 변환은 일대일이다.       |
| n. Col A = Rm                          | b. A는 I에 행동치이다.                  | q. Nul A = {0}               |
| o. dim Col A = m                       | p. rank A = n                        | *. rank A = p                |


* 3. 행렬식(Determinants)
** 3.1 행렬식 도입
2x2 행렬식 detA는 ad-bc였다. 1x1 행렬식은 그 하나의 요소값이다.
2x2를 넘는 행렬식을 구하기 위하여 aij를 요소로 하는 3x3행렬을 만들어서 사다리꼴로 행축약을 해본다. 그러면 가장 마지막 추축열의 마지막 요소는 a11을 공통배수로 하는 식이 된다. 
원본행렬이 가역적이면 행동치인 이 축약행렬의 마지막 요소는 0이 아니어야만 한다. 바로 a11을 제외한 식 자체가 3x3행렬의 행렬식이다. 이 식은
a11a22a33 + a12a23a31 + a13a21a32 - a11a23a32 - a12a21a33 - a13a22a31 이다.
이것을 공통배수들로 묶되 선두요소가 앞에 오도록 정렬해서 묶으면 
a11(a22a33 - a23a32) - a12(a21a33 - a23a31) + a13(a21a32 - a22a31) 이 된다. a12의 경우 a21이 a23보다 선두요소이므로 앞에 배치하기 위하여 -1을 공통배수로 잡았다.
2x2 행렬식이 ad-bc인 것을 각 그룹에 적용하여 행렬로 표현해 보면 재밌는 결과를 얻게 된다.
a11*det[[a22 a23] [a32 a33]] - a12*det[[a21 a23] [a31 a33]] + a13*det[[a21 a22] [a31 a32]]
이식의 각항을 3x3 원본행렬과 비교하여 생각해보면 원본행렬의 i,j번째 행과 열을 제외한 나머지 부분들을 모은 것이 행렬식에 위치한 행렬이 됨을 알 수 있다.
이것을 간편하게 나타내도록 각항의 행렬을 원본행렬인 A에 ij를 붙인 형태로 표현할 수 있다. 그러면
a11*detA11 - a12*detA12 + a13*detA13 이 된다.
이것을 재귀적으로 4x4 이상에도 적용할 수 있으니, n x n 행렬A의 detA는 그 부분행렬인 (n-1)x(n-1)행렬의 행렬식들을 이용하여 정의할 수 있다.

#+BEGIN_QUOTE
정의: n x n 행렬A의 행렬식.

n이 2이상인 n x n 행렬A = [aij]의 행렬식은 +,-가 교차하는 a1j*detA1j 형태의 n개의 항들의 합이며, 그 첫째행은 a1j,...,a1n까지의 원소들로 되어 있다.
기호로 나타내면, detA = a11*detA11 - a12*detA12 + ... + (-1)^(1+n)*a1n*detA1n = sum(j=1->n)(-1)^(1+j)*a1j*detA1j 이다.
#+END_QUOTE

식을 더 간명하게 하기 위해서 (i,j)여인수(cofactor) 표기를 도입하자.
Cij = (-1)^(i+j)*detAij
그러면 detA = a11*C11 - a12*C12 + ... + a1n*C1n 이 된다. 이것을 A의 첫째행에 대한 여인수 전개(cofactor expansion across the first row of A)라고 부른다.

#+BEGIN_QUOTE
정리 1. 여인수 전개에 의한 행렬식 계산.

i행에 대한 여인수 전개: detA = ai1*Ci1 - ai2*Ci2 + ... + ain*Cin
j열에 대한 여인수 전개: detA = a1j*C1j - a2j*C2j + ... + anj*Cnj
#+END_QUOTE
0이 많은 행이나 열에 여인수 전개를 사용하면 계산이 편리해 진다. 0인 항은 계산할 필요가 없기 때문이다. 

#+BEGIN_QUOTE
정리 2. 삼각행렬의 행렬식 계산.

삼각행렬은 주대각 성분의 곱이 행렬식이 된다.
#+END_QUOTE

#+BEGIN_QUOTE
수치적 유의사항.

오늘날의 표준에 따르면, 25x25행렬도 작은데 이것의 행렬식을 여인수 전개로 계산하는 것은 아직도 불가능에 가깝다. 
여인수 전개의 계산횟수는 보통 n!이다. 25!은 1.5*10^25이니 초당 1조 연산을 하는 컴퓨터가 있어도 50만년이 소요된다.
여인수 전개보다 더 빠른 방법이 아래에 소개된다.
#+END_QUOTE

** 3.2 행렬식 특성
행렬식의 비밀은 행연산이 행렬식에 미치는 영향에 있다.

#+BEGIN_QUOTE
정리 3. 행연산이 행렬식에 미치는 영향.

원본행렬을 A라 하고 여기에 행연산이 수행된 행렬을 B라 하자.
행교체연산: detB = detA
행교환연산: detB = -detA
행배수연산: detB = k*detA
#+END_QUOTE
원본행렬을 행축약하여 삼각행렬로 만들면서 정리3의 연산을 반영하고 이것과 주대각성분의 곱을 수행하면 행렬식이 도출된다.
축약행렬U가 삼각행렬일 경우 행교체와 r회의 행교환만 있었다면 detA = (-1)^r*detU 가 된다.
U가 삼각행렬이 안되면 detA=0이 된다.  

#+BEGIN_QUOTE
정리 4. 정방행렬A는 detA≠0인 경우에만 가역적이다.
#+END_QUOTE
반대로 detA=0이면 비가역적인데, 이럴 경우 A의 열들은 선형종속이며 A의 행들도 선형종속이다. 
전치행렬At의 열들은 A의 행들이므로 이것의 열들도 선형종속이며 따라서 At 역시 비가역이다. 
이런관계로 어떤 행렬의 두 열이나 두 행이 같다면 선형종속이다. 

#+BEGIN_QUOTE
수치적 유의사항.

1.현대 컴퓨터는 *행연산을 이용한 행렬식* 으로 계산한다.
2.위 방법으로 n x n 행렬을 계산하면 2n^3/3 회의 연산만 필요하다. 25x25행렬은 1만회의 연산이 1초 내에 수행되게 된다.
#+END_QUOTE
행이나 열에 0이 많으면 여인수 전개를 행연산과 함께 사용해서 행렬의 크기를 줄여나갈 수 있다.

*** 열 연산
행연산을 열연산에도 적용할 수 있다.
#+BEGIN_QUOTE
정리 5. A가 n x n 정방행렬이면 detAt=detA.
#+END_QUOTE
n=1이면 참인게 분명하다.
n이 2이상일 경우 A의 a1j의 여인수와 At의 aj1의 여인수는 같다. 따라서 행에 대한 detA의 여인수 전개와 열에 대한 detAt의 여인수 전개도 같다.
결국 detAt=detA임을 알 수 있다.
정리5 덕분에 행연산이 열연산에 그대로 적용됨을 알 수 있다. 즉 정리3의 행렬식 행연산을 At에 적용하게 되면 A에는 열연산을 행하는 것과 같아진다.

*** 행렬식과 행렬곱(Matrix Products)
#+BEGIN_QUOTE
정리 6. 행렬식 곱의 특성.

A와 B가 n x n 행렬이면 detAB = (detA)(detB).
#+END_QUOTE
행렬합은 행렬식에 적용되지 않는다.

*** 행렬식 함수의 선형성(A linearity Property of the Determinant Function)
행렬식을 한 개의 벡터변수를 받는 함수로 생각해 볼 수 있다. 이것을 위하여 행렬A가 j번째 열에서 벡터변수 x를 가지고 있다고 가정해보자.
그러면 A = [a1 a2 ... aj-1 x aj+1 ... an]이 될 것이다. 그러면 A에 대한 행렬식은 T(x) = detA 이므로
T(x) = det[a1 a2 ... aj-1 x aj+1 ... an]이 된다.
선형변환은 입력인자의 배수를 밖으로 빼낼 수도 있고 입력인자들의 합에 대한 변환을 개별변환들의 합으로 분리하는 것이 가능하다.
이 행렬식 함수도 이러한 선형변환의 성질이 그대로 유지되어 입력벡터의 배수를 밖으로 빼낼 수도 있고, 입력벡터들의 합에 대한 변환을 개별변환들의 합으로 분리할 수도 있다.

*** 정리3, 6의 증명 
행렬식 행연산에 기본행렬을 도입하여 detEA = (detE)(detA)로 공식화할 수도 있다. 이 때 detE는 행교체의 경우 1, 행교환의 경우 -1, 행배수의 경우 배수r이 된다.
**** 정리3의 증명
정리3을 공식화하면 detB = a*detA 인데, a가 1 또는 -1 또는 r이 된다. 정리3에서 detB는 detA에 행연산이 실시된 것이므로 행연산의 스냅샷인 기본행렬을 이용하여 detEA로 바꾸어 표현할 수 있다.
detEA가 a*detA로 환원된다면 detB = a*detA임이 증명된다. detEA를 E에 의하여 영향받지 않는 i번째 행에 대하여 여인수 전개해보면

detEA = ai1(-1)^(i+1)*detBi1 + ... + ain(-1)^(i+n)*detBin 인데 EA의 부분행렬인 detBi1은 정리6에 의하여 detEi1*detAi1으로 볼 수 있는데 detEi1을 a(알파)로 치환해보면

      = a*ai1(-1)^(i+1)*detAi1 + ... + a*ain(-1)^(i+n)*detAin 이 되고 알파로 묶어놓고 보면 나머지는 A의 i번째 행에 대한 여인수 전개와 같아진다. 결국

      = a*detA 가 된다.

**** 정리6의 증명
행렬A가 비가역적이면 detAB = (detA)(detB)는 0 = 0*0 으로 같으므로 성립되고
A가 가역적이면 A~In이고 여기에 동원된 기본행렬들을 반영하면 A = Ep...E1*In = Ep...E1이 된다.
detAB를 |AB|로 표현한다. |AB|에서 A를 기본행렬로 대치하면 |Ep...E1B|가 나오는데 정리6을 Ep와 나머지에 적용하면 |Ep||Ep-1...E1B|가 된다.
정리6을 계속 재귀적으로 적용하면 결국 |Ep...Ep1||B|까지 오게 되는데 좌측을 A로 치환하면 |A||B|에 이르게 된다.
이렇게 증명대상인 정리6을 재귀적으로 적용하여 정리6의 증명을 시도하는 것에 모순은 없는가 의문이다.
