** 8.6 곡선(curves)과 곡면(surfaces)
   옛날엔 나무, 오늘날엔 철로 길고 얇은 띠를 만들어 배, 차, 비행기를 만든다. 띠를 곡선으로 만들기 위해 추와 못을 쓰는데(그래서 제어점이라 부른다), 추와 못이 띠 전체에 물리적 힘을 가하기 때문에 하나만 움직여도 전체가 변형된다. 이 문제를 해결하려고 피에르 베지어는 제어점을 더 추가하여 제어점 이동이 곡선의 관련 부분만 변형되게 만들었다.
   
*** 베지어 곡선
    베지어 곡선은 공학 외에 컴퓨터그래픽에도 중요하다. 베지어 곡선을 이용하면 상대적으로 적은 수의 제어점들로 곡선과 곡면의 정확한 정보를 저장할 수 있고 곡선과 곡면에 대한 명령도 제어점만 다루어 처리할 수 있다. 또한 베지어 곡선의 특수한 구조는 보여지는 최종 화면을 만드는 그래픽 파이프라인 계산 속도를 높이기도 한다.
    2차 베지어 곡선은 3개 제어점으로 구성되고 3차 베지어 곡선은 4개 제어점으로 구성되는데 이 두 가지를 살펴본다. 두 베지어 곡선의 제어점들은 R^{2}나 R^{3}에 있거나 R^{3} 또는 R^{4}의 동차식으로 나타낼 수 있다.

    #+BEGIN_QUOTE
    베지어 곡선의 표준 매개변수적 기술.

    매개변수인 t가 0이상 1이하일 때,
    1. 이차베지어곡선의 표준 매개변수적 기술:
       w(t) = (1-t)^{2}P_{0} + 2t(1-t)p_{1} + t^{2}p_{2}
    2. 삼차베지어곡선의 표준 매개변수적 기술: 
       x(t) = (1-t)^{3}p_{0} + 3t(1-t)^{2}p_{1} + 3t^{2}(1-t)p_{2} + t^{3}p_{3}
    #+END_QUOTE
      
    일반적인 곡선은 초기 및 마지막 제어점만 지나는데, 베지어 곡선은 항상 제어점들의 볼록 외피 안에 있다. 베지어 곡선은 본질적 특성이 선형변환과 평행이동 작용에서 보존되므로 컴퓨터 그래픽에서 유용하다. 베지어 곡선에 선형변환을 적용한 것을 식으로 전개해보면 개별 제어점들에 선형변환이 개별 적용됨을 알 수 있다. 

    제어점은 접선을 결정하고, 접선의 방향은 베지어 곡선의 *접선벡터(tangent vector)* 라 불리는 도함수에 의하여 제시된다. 이 도함수는 (입력구간의) 엔트리 별로 계산된다.
    이차베지어곡선을 미분하여 도함수를 구하고 도함수의 미지수에 곡선구간의 시작과 끝 엔트리를 집어 넣으면 해당 엔트리 별 접선방향이 구해진다. 만약 어느 하나의 접선방향이 0이면 베지어 곡선은 그냥 선분이 되어 버린다. 

*** 두 개의 베지어 곡선 연결하기
    끝을 붙여 곡선을 연결할 수 있다. 연결된 곡선은 연결지점에서 G^{0} 기하학적 연속성(geometry continuity)을 가진다. 이 때는 연결지점에서 곡선들의 접선이 모서리처럼 다른 방향으로 급격히 달라질 수 있다. 연결지점이 부드럽게 되려면 접선벡터의 방향이 동일하게 곡선을 조정하면 된다. 연결지점에서 접선벡터의 방향이 같은 것을 G^{1} 기하학적 연속성이라 부른다. 방향만 같으면 되고 접선 크기는 달라도 무관하다. 방향과 크기까지 같으면 C^{1} 매개 연속성(parametric continuity)을 가진다. 

    #+BEGIN_QUOTE
    [[https://en.wikipedia.org/wiki/Smoothness#Geometric_continuity][기하학적 연속성]]([[https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline#Continuity][다른 참조)]]
    1. G0(위치연속) : 두 곡선이 단순히 연결되었을 때
    2. G1(접선연속) : 연결 + 연결지점의 두 곡선의 접선(tangent) 방향이 같을 때
    3. G2(곡률연속) : 연결 + 동일 접선방향 + 연결지점의 두 곡선의 곡률이 같을 떄
    4. GN : 더 높은 차수로 곡선이 연결되었을 때.
    
    [[https://en.wikipedia.org/wiki/Smoothness#Parametric_continuity][매개 연속성]] 
    1. C^{-1} 매개연속: 곡선이 불연속이다.
    2. C^{0} 매개연속: 곡선이 연속이다.
    3. C^{1} 매개연속: 일차도함수가 연속이다.
    4. C^{2} 매개연속: 일차 및 이차도함수가 연속이다.
    5. C^{n} 매개연속: 일차부터 n차도함수까지 연속이다.
    #+END_QUOTE
    
    연결지점에서 G^{1} 연속성을 가질 때 접선벡터의 방향은 같고 크기가 달랐다. 이것은 연결지점에서 각 곡선의 도함수가 배수관계임을 의미하며, *기하학적으로는 연결지점이 다른 제어점들이 끝점인 선분 위에 놓여 있음* 을 의미한다. (책의 설명 중 G^{1} 연속성의 배수관계식을 구하기 위하여 t=(k+1)^{-1} 이 갑자기 등장하는데 어떤 근거로 이것이 등장한 것인지 설명이 없다.)
    연결지점에서 C^{1} 연속성을 가질 때는 각 곡선의 도함수의 배수관계가 1인 경우에 해당한다. *기하학적으로는 끝점인 제어점들의 중간지점이 연결지점임* 을 의미한다.

    두 개의 3차 베지어 곡선은 C^{1} 연속이고 동시에 두 곡선의 2차도함수가 모두 동일한 경우에 C^{2} 연속성을 가진다. 다른 3차 곡선으로 B스플라인(splines)이 있는데 두 개의 곡선이 하나가 아닌 3개의 제어점을 공유하기 때문에 항상 C^{2} 연속성을 가진다. B스플라인을 사용하는 그래픽 도형은 더 많은 제어점들을 가지므로 결과적으로 더 많은 계산이 요구된다. (3차베지어곡선이 4개 제어점을 가지고 연결될 경우 1개만 제어점을 공유하는데 B스플라인은 한 개 곡선이 몇 개의 제어점을 가지는지 몰라도 3개의 제어점을 공유한다.) 

    #+BEGIN_QUOTE
    [[https://en.wikipedia.org/wiki/Spline_(mathematics)][스플라인]]([[https://en.wikipedia.org/wiki/Non-uniform_rational_B-splineNURBS][역사적 배경]])
    스플라인(박판)은 배 설계자들이 실물크기 버전을 그릴 필요가 있을 때 도움을 받던 유연한 나무띠를 가리키는 말이었다. 스플라인의 유연성 덕분에 띠가 적은 힘으로도 모양을 취하게 해주므로 제약조건에 맞는 가장 부드러운 모양을 만든다.
    1946년 수학자들이 스플라인 모양 연구를 시작하여 스플라인 곡선 내지는 스플라인 함수로 알려진 조각(piecewise)다항식공식을 얻는다. 쇤버그가 옛날 설계자들이 사용하던 기계적 스플라인의 유사성을 본 떠 여기에 스플라인 함수라는 이름을 붙였다.
    스플라인 함수는 다항식들에 의하여 [[https://en.wikipedia.org/wiki/Piecewise][조각함수(piecewise function, hybrid function, 다수의 하위 함수에 의하여 정의되는 함수로 각 하위함수가 특정 입력구간에 적용된다.)]]로 정의된 특수 함수이다. 컴퓨터 그래픽에서는 조각다항식 매개곡선으로 자주 언급된다. 

    [[https://en.wikipedia.org/wiki/B-spline][B스플라인(기저 스플라인)]]    
    B스플라인 함수는 제어점이라 부르는 다수의 점들을 지나는 유연한 띠들의 결합이며 부드러운 곡선을 만든다. n차 B스플라인 함수는 변수 x가 n-1차인 조각다항식함수이다. 이름 그대로 스플라인 함수 공간에서 기저함수의 역할을 한다. 자세한 내용 생략.  

    [[https://en.wikipedia.org/wiki/Non-uniform_rational_B-splineNURBS][(NonUniform Rational B-Spline)]]
    [[https://en.wikipedia.org/wiki/B-spline#NURBS][넙스는 본질적으로 동차좌표에 있는 B스플라인이다.]] 자세한 내용 생략.
    #+END_QUOTE
    
    #+BEGIN_QUOTE
    [[https://math.stackexchange.com/questions/1251457/what-is-parameterization][수학적 매개변수화]]
    정리해보면, 한 개 또는 그 이상의 매개변수로 변화하는 방정식을 만들되 입력변수에 따른 출력이 반드시 존재함으로써 일일히 존재여부를 검수할 필요가 없게 만드는 것으로 생각된다.
    #+END_QUOTE
    
    3차 베지어 곡선에서 일차도함수의 크기는 곡선의 물리적 모양과 관계 없고 곡선의 수학적 매개변수화만 반영한다. 이를테면 기존 함수와 같은 경로를 순회하되 입력구간의 폭이 두배인 함수가 있다면 새 함수의 일차도함수는 기존함수의 일차도함수의 두배가 된다. 즉 접선벡터의 크기가 두 배가 된다는 의미다. 기존함수를 새 함수로 대체하더라도 이런 차이가 발생하는 것 외에 곡선의 매끄러움은 양자가 비슷하게 유지되는 것이 특징이다. (그림과 공식을 제시하여 비교하여 보여주었더라면 훨씬 좋았을 것이나 압축적인 설명으로 그쳐 알기가 어렵다. 따라서 이러한 해석이 정확하다고 단정할 수 없다.)

    실무에서는 많은 간단한 베지어 곡선들을 연결하여 그래픽 객체를 만든다. 이를테면 포스트스크립트의 문자들은 제어점들의 집합으로 저장되는데 선분과 베지어 곡선을 사용하여 윤곽을 생성하는 방법도 포함된다. 문자의 확대는 하나의 상수 배수로 각 제어점의 좌표를 곱하는 것이 필요하다. 문자 윤곽을 계산한 뒤에 내부를 채우게 된다.

*** 베지어 곡선의 행렬방정식
    베지어 곡선은 (제어점의) 계수로 다항식을 사용하는 제어점들의 선형결합이다. 그러므로 제어점들의 행렬과 다항식의 행렬곱 형태인 행렬방정식으로 나타낼 수 있다. 다항식의 행렬은 다시 항의 계수의 행렬과 항들의 행렬의 곱으로 나타낼 수 있다.
     *베지어 곡선 행렬방정식 = 제어점 행렬 x 다항식 계수행렬 x 다항식 멱의 벡터*
    여기서 제어점 행렬을 *기하행렬(geometry matrix)G* 라고 한다. 다항식 계수행렬은 *베지어 기저행렬 M_{B}* 이라고 한다. 다항식 멱 벡터를 u(t)라고 하면 베지어 곡선 행렬방정식은 GM_{B}u(t) 로 표기할 수 있다.

    베지어 삼차 곡선 이외에 다른 매개 삼차 곡선도 이런 형태로 표기한다. 위에서 베지어 기저행렬만 적절히 바꾸면 B스플라인이 된다. 마찬가지로 베지어 기저행렬만 Hermite 기저행렬로 바꾸면 Hermite 삼차곡선이 된다. Hermite 삼차곡선의 경우 기하행렬의 열들은 곡선의 시작점, 곡선의 끝점, 시작점의 접선벡터, 끝점의 접선벡터로 구성된다.
    (다른 경우는 순서대로 시작점, 시작점 접선벡터, 끝점 접선벡터, 끝점 순일 것이다.)

    베지어 곡선의 행렬방정식을 변환시키면 베지어 곡면에 사용될 수 있다. 통체로 전치시키는 것과 비슷한 모양새가 되지만 기하행렬은 전치시키는 것과 다른 배치를 하게 된다.
    *변형된 방정식 = 다항식 멱벡터 전치 x 다항식 계수행렬 전치 x 제어점 행렬 수직배치*
    앞의 두 개를 계산하면 *다항식이 열인 블록행렬 x 제어점이 행인 블록행렬(기하벡터)* 이 된다. 기하벡터의 성분도 벡터인데 좌측으로 곱해지는 것이 가능하다. 
    
*** 베지어 곡면
    4개의 베지어 곡선으로 3차원 쌍삼차곡면 조각을 만들 수 있다. 각 곡선의 기하행렬들을 행으로 취급하여 블록행렬을 만들면 이것 역시 기하행렬 G가 된다. 여기에 베지어 기저행렬과 다항식 멱벡터를 곱한 GM_{B}u(t)의 결과는 위에서 베지어 곡면에 사용될 (매개변수를 s로 사용하는) 변형된 방정식 중 기하벡터로 사용될 수 있는 열벡터가 된다. 
    (어떻게 그렇게 되는지에 대한 이유는 설명이 없어 답답함을 느끼게 한다.) 어찌되었건 이것을 반영하여 *베지어 쌍삼차곡면(bicubic surface)* 을 만들면 아래와 같다.
    #+BEGIN_QUOTE
      x(s,t) = u(s)^{T}M_{B}^{T}GM_{B}u(t),  0\le s,t\le 1
    #+END_QUOTE

    이 곡면은 16개 제어점들의 선형결합이다. 만약 제어점들이 상당히 일정한 직사각 배열로 배치되어 있다면 베지어 곡면은 8개의 베지어 곡선으로 짜여지며, 이중 4개는 매개변수 t의 방향이고 나머지 4개는 s의 방향이다. 곡면은 모서리의 4개의 제어점을 통과한다. 곡면이 보다 더 큰 곡면의 중앙에 있을 때, 16개 제어점 중 경계의 12개 제어점이 인접한 곡면들과 공유된다.

*** 곡선과 곡면 근사
    CAD나 리얼한 게임을 만드는 프로그램에서 다양한 기하 구조를 다루게 되는데 베지어 곡선과 베지어 곡면은 다수의 폴리곤으로 근사된 객체보다 더 적은 수의 제어점들만 관련되므로 계산 속도를 극적으로 줄일 수 있다.
    장면 조합 이후 최종 이미지 준비는 다면체처럼 평면과 직선으로 구선된 객체가 더 선호된다. 디자이너는 광원도입, 곡면에 색과 텍스처 추가, 곡면 반사 흉내에 의하여 장면을 렌더링할 필요가 있다.
    곡면의 점p에 반사된 빛의 방향을 계산하는 것은 들어오는 빛 및 (p의 접면과 수직인 벡터인) 곡면 법선 양쪽의 방향을 알아야 한다. 법선 벡터 계산은 p가 이동함에 따라 법선 벡터가 계속 변하는 곡면보다는 작고 평평한 폴리곤으로 조합된 곡면에서 더 쉽다. 

    #+BEGIN_QUOTE
    1. *cross product*(*vector product*, 외적이라고도 함, outer product와 다름)
       이것의 크기는 ∣a∣∣b∣sinθ 인데 각도는 a와 b가 이루는 각이다. 
    2. dot product(scaler product, 내적)
    3. outer product(두 벡터 간의 텐서곱)
       열벡터와 행벡터의 곱으로 행렬이 생성된다.
    #+END_QUOTE
    
    평평한 폴리곤의 꼭지점 3개가 p_{1,2,3} 으로 있을 때, 곡면법선은 양 또는 음의 벡터곱 (p_{2}-p_{1}) \times (p_{2}-p_{3}) 이다. 폴리곤이 작으면 렌더링에 단 하나의 법선벡터만 있으면 된다. 널리 사용되는 구로(Gouraud) 쉐이딩과 퐁(Phong) 쉐이딩 모두 폴리곤으로 정의된 곡면을 요한다. 이런 필요성 때문에 베지어 곡선 및 곡면은 장면 조합 단계에서 직선분과 다면체 표면으로 근사된다. 근사의 기본 아이디어는 베지어 곡선과 곡면을 더 작은 조각으로 더 많은 제어점들을 갖도록 나누는 것이다. 

*** 베지어 곡선과 곡면의 재귀적 세분(subdivision)
    원본 곡선을 절반으로 나누면 2개의 베지어 곡선이 되고 첫번째 베지어 곡선은 원본곡선의 첫번째 제어점과 두번째 곡선의 초기 제어점을 공유한다. 두번째 곡선은 원본곡선의 끝점을 공유한다. 
    새로운 제어점들은 원본제어점들이 둘러싼 공간보다 더 적은 공간만 둘러싼다. 제어점 사이의 거리를 줄이면, 각 곡선분의 제어점들도 선분에 가깝게 이동한다. 이러한 변화감소 속성(variation-diminishing property)은 베지어 곡선이 항상 제어점들의 볼록 외피에 있다는 사실에 의존한다.
    원본곡선의 시작과 끝점이 공유되는 것 외에 나머지 새 제어점들은 원본곡선의 매개 방정식과 연관된다. 원본곡선의 중간지점은 구간 t가 0이상 1이하이므로 0.5일 때 나타난다. 원본곡선의 매개 방정식에 0.5를 넣으면 구해진다. 남은 두 곡선의 내점들은 원본곡선의 접선 방향을 보여주는 방정식의 도함수를 구하고, 두 곡선과 원본곡선의 관계식을 구한 뒤, 두 곡선의 도함수와 원본곡선 도함수의 관계식을 구하여, 두 곡선의 도함수로 각각의 시작점과 끝점의 접선의 방향을 구하여 구할 수 있다. 여기까지가 세분과정의 한 단계이다. 
    이러한 세분과정을 반복하여 곡선이 충분히 직선이 될 때까지 진행하는데 새로 생성된 두 곡선 중 하나가 먼저 충분히 직선이 되면 그 곡선에 대한 세분과정을 중단하는 순응적 반복(adative recursion)도 가능하다. 세분이 모두 완료되면 세분된 곡선의 끝점을 선분으로 연결하여 다음 계산 작업을 준비한다. 
    
    쌍삼차 베지어 곡면도 변화감소속성을 갖고 있어 앞에서 본 재귀적 세분의 과정을 내부 곡선들에 적용할 수 있다. 쌍삼차 베지어 곡면은 두가지 방향으로 곡선들이 평행하게 정렬되어 있으니 이 중 한 방향을 택하여 세분하고 나머지 방향의 곡선들을 세분하면 곡면의 세분이 완료된다. (다만 순응적 반복은 미묘한 문제가 있다고 한다.)
